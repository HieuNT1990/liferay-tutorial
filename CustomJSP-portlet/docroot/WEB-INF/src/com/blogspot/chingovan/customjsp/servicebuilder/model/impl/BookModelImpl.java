/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.blogspot.chingovan.customjsp.servicebuilder.model.impl;

import com.blogspot.chingovan.customjsp.servicebuilder.model.Book;
import com.blogspot.chingovan.customjsp.servicebuilder.model.BookModel;
import com.blogspot.chingovan.customjsp.servicebuilder.model.BookSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Book service. Represents a row in the &quot;Book&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.blogspot.chingovan.customjsp.servicebuilder.model.BookModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BookImpl}.
 * </p>
 *
 * @author chinv
 * @see BookImpl
 * @see com.blogspot.chingovan.customjsp.servicebuilder.model.Book
 * @see com.blogspot.chingovan.customjsp.servicebuilder.model.BookModel
 * @generated
 */
@JSON(strict = true)
public class BookModelImpl extends BaseModelImpl<Book> implements BookModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a book model instance should use the {@link com.blogspot.chingovan.customjsp.servicebuilder.model.Book} interface instead.
	 */
	public static final String TABLE_NAME = "Book";
	public static final Object[][] TABLE_COLUMNS = {
			{ "BookId", Types.BIGINT },
			{ "Title", Types.VARCHAR },
			{ "Edition", Types.VARCHAR },
			{ "ISBN", Types.VARCHAR },
			{ "cover", Types.VARCHAR },
			{ "NumberOfPage", Types.INTEGER },
			{ "PublisherName", Types.VARCHAR },
			{ "PublisherURL", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Book (BookId LONG not null primary key,Title VARCHAR(75) null,Edition VARCHAR(75) null,ISBN VARCHAR(75) null,cover VARCHAR(75) null,NumberOfPage INTEGER,PublisherName VARCHAR(75) null,PublisherURL VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Book";
	public static final String ORDER_BY_JPQL = " ORDER BY book.bookId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Book.BookId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.blogspot.chingovan.customjsp.servicebuilder.model.Book"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.blogspot.chingovan.customjsp.servicebuilder.model.Book"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Book toModel(BookSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Book model = new BookImpl();

		model.setBookId(soapModel.getBookId());
		model.setTitle(soapModel.getTitle());
		model.setEdition(soapModel.getEdition());
		model.setIsbn(soapModel.getIsbn());
		model.setCover(soapModel.getCover());
		model.setNumberOfPage(soapModel.getNumberOfPage());
		model.setPublisherName(soapModel.getPublisherName());
		model.setPublisherURL(soapModel.getPublisherURL());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Book> toModels(BookSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Book> models = new ArrayList<Book>(soapModels.length);

		for (BookSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_BOOKS_AUTHORS_NAME = "Books_Authors";
	public static final Object[][] MAPPING_TABLE_BOOKS_AUTHORS_COLUMNS = {
			{ "BookId", Types.BIGINT },
			{ "AuthorId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_BOOKS_AUTHORS_SQL_CREATE = "create table Books_Authors (AuthorId LONG not null,BookId LONG not null,primary key (AuthorId, BookId))";
	public static final boolean FINDER_CACHE_ENABLED_BOOKS_AUTHORS = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.Books_Authors"), true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.blogspot.chingovan.customjsp.servicebuilder.model.Book"));

	public BookModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _bookId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBookId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bookId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Book.class;
	}

	@Override
	public String getModelClassName() {
		return Book.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("bookId", getBookId());
		attributes.put("title", getTitle());
		attributes.put("edition", getEdition());
		attributes.put("isbn", getIsbn());
		attributes.put("cover", getCover());
		attributes.put("numberOfPage", getNumberOfPage());
		attributes.put("publisherName", getPublisherName());
		attributes.put("publisherURL", getPublisherURL());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long bookId = (Long)attributes.get("bookId");

		if (bookId != null) {
			setBookId(bookId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String edition = (String)attributes.get("edition");

		if (edition != null) {
			setEdition(edition);
		}

		String isbn = (String)attributes.get("isbn");

		if (isbn != null) {
			setIsbn(isbn);
		}

		String cover = (String)attributes.get("cover");

		if (cover != null) {
			setCover(cover);
		}

		Integer numberOfPage = (Integer)attributes.get("numberOfPage");

		if (numberOfPage != null) {
			setNumberOfPage(numberOfPage);
		}

		String publisherName = (String)attributes.get("publisherName");

		if (publisherName != null) {
			setPublisherName(publisherName);
		}

		String publisherURL = (String)attributes.get("publisherURL");

		if (publisherURL != null) {
			setPublisherURL(publisherURL);
		}
	}

	@JSON
	@Override
	public long getBookId() {
		return _bookId;
	}

	@Override
	public void setBookId(long bookId) {
		_bookId = bookId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getEdition() {
		if (_edition == null) {
			return StringPool.BLANK;
		}
		else {
			return _edition;
		}
	}

	@Override
	public void setEdition(String edition) {
		_edition = edition;
	}

	@JSON
	@Override
	public String getIsbn() {
		if (_isbn == null) {
			return StringPool.BLANK;
		}
		else {
			return _isbn;
		}
	}

	@Override
	public void setIsbn(String isbn) {
		_isbn = isbn;
	}

	@JSON
	@Override
	public String getCover() {
		if (_cover == null) {
			return StringPool.BLANK;
		}
		else {
			return _cover;
		}
	}

	@Override
	public void setCover(String cover) {
		_cover = cover;
	}

	@JSON
	@Override
	public int getNumberOfPage() {
		return _numberOfPage;
	}

	@Override
	public void setNumberOfPage(int numberOfPage) {
		_numberOfPage = numberOfPage;
	}

	@JSON
	@Override
	public String getPublisherName() {
		if (_publisherName == null) {
			return StringPool.BLANK;
		}
		else {
			return _publisherName;
		}
	}

	@Override
	public void setPublisherName(String publisherName) {
		_publisherName = publisherName;
	}

	@JSON
	@Override
	public String getPublisherURL() {
		if (_publisherURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _publisherURL;
		}
	}

	@Override
	public void setPublisherURL(String publisherURL) {
		_publisherURL = publisherURL;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Book.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Book toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Book)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BookImpl bookImpl = new BookImpl();

		bookImpl.setBookId(getBookId());
		bookImpl.setTitle(getTitle());
		bookImpl.setEdition(getEdition());
		bookImpl.setIsbn(getIsbn());
		bookImpl.setCover(getCover());
		bookImpl.setNumberOfPage(getNumberOfPage());
		bookImpl.setPublisherName(getPublisherName());
		bookImpl.setPublisherURL(getPublisherURL());

		bookImpl.resetOriginalValues();

		return bookImpl;
	}

	@Override
	public int compareTo(Book book) {
		long primaryKey = book.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Book)) {
			return false;
		}

		Book book = (Book)obj;

		long primaryKey = book.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Book> toCacheModel() {
		BookCacheModel bookCacheModel = new BookCacheModel();

		bookCacheModel.bookId = getBookId();

		bookCacheModel.title = getTitle();

		String title = bookCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			bookCacheModel.title = null;
		}

		bookCacheModel.edition = getEdition();

		String edition = bookCacheModel.edition;

		if ((edition != null) && (edition.length() == 0)) {
			bookCacheModel.edition = null;
		}

		bookCacheModel.isbn = getIsbn();

		String isbn = bookCacheModel.isbn;

		if ((isbn != null) && (isbn.length() == 0)) {
			bookCacheModel.isbn = null;
		}

		bookCacheModel.cover = getCover();

		String cover = bookCacheModel.cover;

		if ((cover != null) && (cover.length() == 0)) {
			bookCacheModel.cover = null;
		}

		bookCacheModel.numberOfPage = getNumberOfPage();

		bookCacheModel.publisherName = getPublisherName();

		String publisherName = bookCacheModel.publisherName;

		if ((publisherName != null) && (publisherName.length() == 0)) {
			bookCacheModel.publisherName = null;
		}

		bookCacheModel.publisherURL = getPublisherURL();

		String publisherURL = bookCacheModel.publisherURL;

		if ((publisherURL != null) && (publisherURL.length() == 0)) {
			bookCacheModel.publisherURL = null;
		}

		return bookCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{bookId=");
		sb.append(getBookId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", edition=");
		sb.append(getEdition());
		sb.append(", isbn=");
		sb.append(getIsbn());
		sb.append(", cover=");
		sb.append(getCover());
		sb.append(", numberOfPage=");
		sb.append(getNumberOfPage());
		sb.append(", publisherName=");
		sb.append(getPublisherName());
		sb.append(", publisherURL=");
		sb.append(getPublisherURL());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.blogspot.chingovan.customjsp.servicebuilder.model.Book");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>bookId</column-name><column-value><![CDATA[");
		sb.append(getBookId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>edition</column-name><column-value><![CDATA[");
		sb.append(getEdition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isbn</column-name><column-value><![CDATA[");
		sb.append(getIsbn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cover</column-name><column-value><![CDATA[");
		sb.append(getCover());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfPage</column-name><column-value><![CDATA[");
		sb.append(getNumberOfPage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publisherName</column-name><column-value><![CDATA[");
		sb.append(getPublisherName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publisherURL</column-name><column-value><![CDATA[");
		sb.append(getPublisherURL());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Book.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Book.class };
	private long _bookId;
	private String _title;
	private String _edition;
	private String _isbn;
	private String _cover;
	private int _numberOfPage;
	private String _publisherName;
	private String _publisherURL;
	private Book _escapedModel;
}